{
  "language": "Solidity",
  "sources": {
    "contracts/IPropertyRegistryContract.sol": {
      "content": "pragma solidity ^0.8.0;\n\ninterface IPropertyRegistryContract {\n    struct Property {\n        uint256 propertyType;\n        address owner;\n        bytes propertyData;\n        // Property details\n    }\n}\n"
    },
    "contracts/IPropertyTypeHandler.sol": {
      "content": "pragma solidity ^0.8.0;\n\nimport \"./PropertyRegistryContract.sol\";\n\ninterface IPropertyTypeHandler {\n    function registerProperty(address originalSender, uint256 propertyId, uint256 propertyType, address owner, bytes memory details) external returns (PropertyRegistryContract.Property memory property);\n    function transferOwnership(address originalSender, uint256 propertyId, PropertyRegistryContract.Property memory property, address newOwner) external returns (PropertyRegistryContract.Property memory propertyOut);\n    function updateRegistry(address originalSender, uint256 propertyId, PropertyRegistryContract.Property memory property, bytes memory details) external view returns (PropertyRegistryContract.Property memory propertyOut);\n}"
    },
    "contracts/Ownable.sol": {
      "content": "pragma solidity ^0.8.0;\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n    \r\n    constructor() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner, \"Not owner\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        owner = newOwner;\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal {\r\n        owner = newOwner;\r\n    }\r\n}"
    },
    "contracts/PropertyRegistryContract.sol": {
      "content": "pragma solidity ^0.8.0;\n\nimport \"./Ownable.sol\";\nimport \"./IPropertyTypeHandler.sol\";\nimport \"./IPropertyRegistryContract.sol\";\n\n\ncontract PropertyRegistryContract is Ownable, IPropertyRegistryContract {\n    constructor(address newOwner) {\n        _transferOwnership(newOwner);\n    }\n\n    modifier preventPropertyTypeChange(uint256 propertyId) {\n        uint256 propertyType = properties[propertyId].propertyType;\n        _;\n        require(properties[propertyId].propertyType == propertyType, \"Handler changed propertyId\");\n    }\n\n    mapping(uint256 => Property) public properties;\n\n    mapping(uint256 => IPropertyTypeHandler) public propertyTypeHandlers;\n\n    // register propertyType handler\n    function registerPropertyTypeHandler(uint256 propertyType, address handlerAddress) external onlyOwner {\n        require(propertyType > 0, \"Must be > 0\");\n        propertyTypeHandlers[propertyType] = IPropertyTypeHandler(handlerAddress);\n    }\n\n    // Functions\n    function registerProperty(uint256 propertyId, uint256 propertyType, address owner, bytes memory details) public {\n        // Record property ownership / add new property to the register\n        require(properties[propertyId].propertyType == 0, \"Property exists\");\n        require(address(propertyTypeHandlers[propertyType]) != address(0), \"Unknown property type\");\n        properties[propertyId] = propertyTypeHandlers[propertyType].registerProperty(msg.sender, propertyId, propertyType, owner, details);\n        // ensure type\n        properties[propertyId].propertyType = propertyType;\n    }\n\n    function transferOwnership(uint256 propertyId, address newOwner) preventPropertyTypeChange(propertyId) public {\n        // Transfer property rights\n        require(properties[propertyId].propertyType != 0, \"Property does not exist\");\n        properties[propertyId] = propertyTypeHandlers[properties[propertyId].propertyType].transferOwnership(msg.sender, propertyId, properties[propertyId], newOwner);\n    }\n\n    function updateRegistry(uint256 propertyId, bytes memory newDetails) public preventPropertyTypeChange(propertyId) {\n        // Update property details\n        require(properties[propertyId].propertyType != 0, \"Property does not exist\");\n        properties[propertyId] = propertyTypeHandlers[properties[propertyId].propertyType].updateRegistry(msg.sender, propertyId, properties[propertyId], newDetails);\n    }\n\n    function verifyOwnership(uint256 propertyId) public view preventPropertyTypeChange(propertyId) returns (address) {\n        // Verify property claims\n        return properties[propertyId].owner;\n    }\n}\n"
    },
    "contracts/SimpleLandHandler.sol": {
      "content": "pragma solidity ^0.8.0;\n\nimport \"./Ownable.sol\";\nimport \"./IPropertyTypeHandler.sol\";\n\ncontract SimpleLandHandler is Ownable, IPropertyTypeHandler {\n\n    function renderProperty(bytes memory propertyData) external pure returns (string memory landAddress){\n        return(abi.decode(propertyData, (string)));\n    }\n\n    function registerProperty(address originalSender, uint256 propertyId, uint256 propertyType, address owner, bytes memory details) external view returns (PropertyRegistryContract.Property memory property) {\n        require(originalSender == owner, \"Not admin\");\n        // abi.decode....\n        // do stuff\n        // propertyData = abi.encode(..\n        property.owner = owner;\n        property.propertyData = details;\n    }\n\n    function transferOwnership(address originalSender, uint256 propertyId, PropertyRegistryContract.Property memory property, address newOwner) external view returns (PropertyRegistryContract.Property memory propertyOut) {\n        require(originalSender == property.owner || originalSender == owner, \"Not owner or admin\");\n        // abi.decode....\n        // do stuff\n        // propertyData = abi.encode(..\n        property.owner = newOwner;\n        return property;\n    }\n\n    function updateRegistry(address originalSender, uint256 propertyId, PropertyRegistryContract.Property memory property, bytes memory details) external view returns (PropertyRegistryContract.Property memory propertyOut) {\n        require(originalSender == owner /* || == propertymanagement dao */, \"Not admin\");\n        // abi.decode....\n        // do stuff\n        // propertyData = abi.encode(..\n        property.propertyData = details;\n        return property;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200000
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}